### Line-by-Line Analysis

#### Shebang
```bash
#!/bin/bash
```
- This line tells the system that the script should be executed using the Bash shell.

#### Initialization
```bash
# create a users.json file if it does not exist
if [ ! -f users.json ]; then
    echo "[]" > users.json
fi
```
- Checks if `users.json` file exists. If not, creates it and initializes it as an empty JSON array (`[]`).

```bash
# create a notes directory if it does not exist
if [ ! -d notes ]; then
    mkdir notes
fi
```
- Checks if the `notes` directory exists. If not, creates it.

#### Main Menu
```bash
# function to show the main menu
main_menu() {
    echo -e "\n📝 Welcome to the Note Taking App 📝"
    echo -e "1. 📝 Create a Note"
    echo -e "2. 📖 View Notes"
    echo -e "3. 📝 Update a Note"
    echo -e "4. 🗑️ Delete a Note"
    echo -e "5. ❌ Exit"
    read -p "Choose an option: " option
    case $option in
        1)
            create_note
            ;;
        2)
            view_notes
            ;;
        3)
            update_note
            ;;
        4)
            delete_note
            ;;
        5)
            exit 0
            ;;
        *)
            echo -e "\e[31m❌ Invalid option\e[0m"
            main_menu
            ;;
    esac
}
```
- Displays the main menu and handles user input.
- Uses `case` statement to call the appropriate function based on user's choice.
- `echo -e` allows for interpretation of escape sequences (`\n` for newline, `\e` for color codes).

#### Create Note
```bash
# function to create a note
create_note() {
    read -p "Enter the title of the note: " title
    read -p "Enter the body of the note: " body
    echo "{\"title\": \"$title\", \"body\": \"$body\"}" > notes/$title.json
    echo -e "\e[32m📝 Note created successfully\e[0m"
    main_menu
}
```
- Prompts user for note title and body.
- Creates a JSON file named after the title in the `notes` directory.
- Uses `echo` to write JSON formatted content to the file.

#### View Notes
```bash
# function to view notes
view_notes() {
    echo -e "1. 📖 View all notes"
    echo -e "2. 📖 View a specific note"
    read -p "Choose an option: " option
    case $option in
        1)
            for note in notes/*.json; do
                title=$(jq -r '.title' $note)
                body=$(jq -r '.body' $note)
                echo -e "\n\e[34mTitle: $title\e[0m"
                echo -e "\e[34mBody: $body\e[0m"
            done
            ;;
        2)
            read -p "Enter the title of the note: " title
            if [ -f notes/$title.json ]; then
                body=$(jq -r '.body' notes/$title.json)
                echo -e "\n\e[34mTitle: $title\e[0m"
                echo -e "\e[34mBody: $body\e[0m"
            else
                echo -e "\e[31m❌ Note does not exist\e[0m"
            fi
            ;;
        *)
            echo -e "\e[31m❌ Invalid option\e[0m"
            view_notes
            ;;
    esac
    main_menu
}
```
- Provides options to view all notes or a specific note.
- Uses `jq` to parse and extract JSON data from note files.

#### Update Note
```bash
# function to update a note
update_note() {
    read -p "Enter the title of the note: " title
    if [ -f notes/$title.json ]; then
        read -p "Enter the new body of the note: " body
        echo "{\"title\": \"$title\", \"body\": \"$body\"}" > notes/$title.json
        echo -e "\e[32m📝 Note updated successfully\e[0m"
    else
        echo -e "\e[31m❌ Note does not exist\e[0m"
    fi
    main_menu
}
```
- Prompts user for the title of the note to be updated.
- If the note exists, prompts for the new body and updates the file.
- If not, displays an error message.

#### Delete Note
```bash
# function to delete a note
delete_note() {
    read -p "Enter the title of the note: " title
    if [ -f notes/$title.json ]; then
        rm notes/$title.json
        echo -e "\e[32m📝 Note deleted successfully\e[0m"
    else
        echo -e "\e[31m❌ Note does not exist\e[0m"
    fi
    main_menu
}
```
- Prompts user for the title of the note to be deleted.
- If the note exists, deletes the file.
- If not, displays an error message.

#### Register User
```bash
# function to register a user
register() {
    read -p "Enter your username: " username
    read -s -p "Enter your password: " password
    echo
    hash=$(echo -n $password | sha256sum | awk '{print $1}')
    echo "Registering user: $username with hash: $hash"  # Debug statement
    if ! grep -q "\"username\": \"$username\"" users.json; then
        jq ". += [{\"username\": \"$username\", \"password\": \"$hash\"}]" users.json > temp.json
        mv temp.json users.json
        echo -e "\n\e[32m🎉 User registered successfully\e[0m"
        main_menu
    else
        echo -e "\n\e[31m❌ Username already exists\e[0m"
        register
    fi
}
```
- Prompts user for username and password.
- Hashes the password using SHA-256.
- Checks if the username already exists in `users.json`.
- If not, adds the new user to `users.json`.
- Debug statements provide feedback during development.

#### Login User
```bash
# function to login a user
login() {
    read -p "Enter your username: " username
    read -s -p "Enter your password: " password
    echo
    hash=$(echo -n $password | sha256sum | awk '{print $1}')
    echo "Logging in user: $username with hash: $hash"  # Debug statement
    stored_hash=$(jq -r --arg username "$username" '.[] | select(.username == $username) | .password' users.json)
    if [ "$hash" == "$stored_hash" ]; then
        echo -e "\n\e[32m✅ Login successful\e[0m"
        main_menu
    else
        echo -e "\n\e[31m❌ Invalid username or password\e[0m"
        login
    fi
}
```
- Prompts user for username and password.
- Hashes the password and checks it against the stored hash in `users.json`.
- If the hashes match, logs the user in.
- Debug statements provide feedback during development.

#### Check for Registered Users
```bash
# check if the user is registered or not
if [ $(jq '. | length' users.json) -eq 0 ]; then
    echo -e "📝 Welcome to the Note Taking App 📝"
    register
else
    echo -e "📝 Welcome to the Note Taking App 📝"
    echo -e "1. 📝 Login"
    echo -e "2. 📝 Register"
    read -p "Choose an option: " option
    case $option in
        1)
            login
            ;;
        2)
            register
            ;;
        *)
            echo -e "\e[31m❌ Invalid option\e[0m"
            ;;
    esac
fi
```
- Checks if `users.json` contains any users.
- If not, prompts the user to register.
- If users exist, prompts for login or registration.

#### Main Menu Call
```bash
main_menu
```
- Starts the main menu, which allows the user to interact with the note-taking application.

### Bash Syntax Overview
- **Shebang (`#!/bin/bash`)**: Specifies the interpreter to execute the script.
- **Comments (`#`)**: Explain parts of the script.
- **Conditionals (`if`, `else`, `fi`)**: Control the flow based on conditions.
- **Loops (`for`, `while`)**: Iterate over items or conditions.
- **Functions**: Define reusable blocks of code.
- **`read -p`**: Prompts user for input.
- **`echo -e`**: Prints text with interpretation of escape characters.
- **`jq`**: A command-line JSON processor used to parse and manipulate JSON data.
- **File operations**: Check for files and directories, create, read, write, and delete files.
- **Hashing (`sha256sum`)**: Encrypts passwords for secure storage.

This explanation provides a comprehensive understanding of the script and how it operates, making it easier to explain the project to others.
