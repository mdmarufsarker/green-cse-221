# -*- coding: utf-8 -*-
"""Confusion Matrix and Classification Report.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xHtqfpIaLIa0OA_pCcMgPmVFs8QitTM0
"""

from sklearn.datasets import load_iris

dataset = load_iris()
x = dataset['data']
y = dataset['target']

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state=42)

print("Training samples: ", len(x_train))
print("Testing samples: ", len(x_test))

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(x_train)

x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

from sklearn.neighbors import KNeighborsClassifier

classifier = KNeighborsClassifier(n_neighbors=3)
classifier.fit(x_train, y_train)

from sklearn import metrics

y_pred = classifier.predict(x_test)
accuracy = metrics.accuracy_score(y_test, y_pred)

print("Model Accuracy: ", accuracy)

from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

range_k = range(1, 15)
scores = {}
scores_list = []

for k in range_k:
  classifier = KNeighborsClassifier(n_neighbors=k)
  classifier.fit(x_train, y_train)
  y_pred = classifier.predict(x_test)
  scores[k] = metrics.accuracy_score(y_test, y_pred)
  scores_list.append(metrics.accuracy_score(y_test, y_pred))

mtrix = metrics.confusion_matrix(y_test, y_pred)
print("Confusion Matrix: ")
print(mtrix)

report = metrics.classification_report(y_test, y_pred)
print("Classification Report: ")
print(report)

import matplotlib.pyplot as plt

plt.plot(range_k, scores_list)
plt.xlabel("Value of K")
plt.ylabel("Accuracy")